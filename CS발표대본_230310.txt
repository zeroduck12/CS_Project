1) 안녕하세요 CS프로젝트 3조의 발표를 맡은 전영덕입니다.(다른 조 하는 것 보고 조원 소개하기)
저희 조의 주제는 MVC패턴입니다.
---------------------------------------------------------
2) 발표 순서입니다.
MVC패턴이 무엇인지 소개하고 예시 2가지를 볼것이며, 최근에는 어떻게 사용되고 있는지 알아볼 것입니다. 
---------------------------------------------------------
3)  서론
---------------------------------------------------------
4) MVC패턴이란 디자인 패턴의 한 종류이며 프로젝트의 구조를 짜는 아키텍쳐 패턴의 하나입니다.
 MVC는 각각 모델 뷰 컨트롤러의 약자로 오른쪽그림을 보면 매우 간단하게  표현되어있으며
앞으로 점점 복잡해질 것입니다. 일단 어떠한 프로그램이 크게 3부분으로 나누어서
구성할수 있다라고 생각하겠습니다.
---------------------------------------------------------
5)디자인 패턴에 대해 상기하겠습니다.
우리는 이미 자바때 디자인패턴에 대해 배웠으며 필기했던것을 그대로 적었습니다.
우리가 방청소를 할 때 최적의 방법을 찾게 되고 이것을 루틴화할 수 있는데
이것을 코딩에 적용한 기법을 디자인 패턴이라고 합니다.
설계자들이 설계를 올바르고 빠르게 도와주며, 우리는 디자인 패턴 중에 하나를 이미 배웠습니다.
---------------------------------------------------------
6) 바로 싱글톤 패턴이며, 계산기프로그램의 구현을 했었습니다.
계산기 프로그램이 전체에서 오직 한개만 생성되므로 메모리관리에 유리했었습니다.
앞에서 소개했듯이 MVC패턴은 아키텍쳐 패턴중에 하나로 프로그램을 시작할 때 구성방식에 대한 패턴입니다.
우리는 각각 자바 미니프로그램을 경험하며 처음 시작을 어떻게 할지 막막했을 수도 있었을 텐데
이러한 아키텍쳐 패턴이 도움이 됐을 수도 있었습니다.
---------------------------------------------------------
7)  MVC패턴은 유저 인터페이스, 데이터 및 논리제어를 구현하는데에 널리 사용되는 디자인 패턴입니다.
우리는 유저인터페이스를 아직 배우고 있는 단계라 생소할 수 있으나 우리눈에 보이는 화면이라고 생각하면 됩니다.
그래서 한 프로그램을 모델 뷰 컨트롤러 각각으로 나눈어 프로그램을 구성하는 이유는 관심사를 분리하는 것으로
업무의 분리와 관리를 쉽게 하는 장점이있습니다. 아직은 무슨말인지 잘 모를 수 있으나 앞으로 계속 나올 것입니다. 
---------------------------------------------------------
8) MVC패턴의 역사를 간단하게 소개하면 
트리베 린스카우그라는 노르웨이 사람이 1979년에 최초로 소개했으며, 관련 논문을 링크걸어놓았습니다.
---------------------------------------------------------
9) 
---------------------------------------------------------
10) 
---------------------------------------------------------
11) 쉬운 예시를 들기 위해 우리가 익숙한 계산기 코드를 소개하겠습니다.
자바로 로직을 짜고 스윙으로 GUI를 구성하여 일반계산기와 공학용 계산기 코드를 구현했습니다.
MVC적용이 안된 즉, MVC패턴이라는 것을 모른 채 계산기라는 프로그램의 코드를 짠다고 할 경우
클래스 라기보다는 하나의 컴포넌트 안에 모든 관련 코드들을 넣어놓았으므로 일반계산기와 공학용 계산기 간에 연관성도 부족하고
코드가 길기 때문에 어떤 한 부분을 수정하고자 할 때, 찾기 어려울 것입니다.
---------------------------------------------------------
16) 이제 각각 모델 뷰 컨트롤러에 대해 알아보고 그 후에 MVC패턴이 적용된 계산기 코드를 보겠습니다.
먼저 모델입니다.
모델은 애플리케이션의 정보를 나타내며, 데이터와 비즈니스로직을 관리합니다.
데이터 베이스 , 상수 초기화값, 변수등의 데이터를 책임지는 컴포넌트로로 다음과 같은 특징이있으나 시간 관계상 넘어가겠습니다.
---------------------------------------------------------
17) 모델 생성의 규칙으로 다음과 같은 특징이 있고 모두 중요하지만 당장 알아볼 것은 뷰나 컨트롤러에 대한 정보는 갖지말아야 한다는 것입니다. 
(1,2,3,4만 보면서 읽고넘어가자)
---------------------------------------------------------
18)모델은 정보이므로 컴트롤러가 정보를 볼 수 있어야 하므로(Observable 클래스를 상속받습니다.
상태 변경 즉 정보의 변경은 mutator의 setchanged메서드를 통해 내부에서 이루어지고 notifyObservers메서드와 
addObserver를 통해 상태변경을 외부로 알릴 것입니다.
---------------------------------------------------------
19) 다음은 뷰 입니다. 앞에서 말했듯이 유저인터페이스부분으로 레이아웃과 화면을 처리하고 입출력을 담당합니다.
---------------------------------------------------------
20) 역시 뷰는 모델의 정보를 따로 저장해서는 안되며 다른 요소를 참조해서는 안됩니다.
---------------------------------------------------------
21) 뷰는 여러개의 뷰를 가질 수 있다는 것은 추후에 나올 온도계코드를 보며 더 직관적으로 알 수 있습니다.
---------------------------------------------------------
22) 다음은 컨트롤러로 애플리케이션의 메인 로직/이벤트처리를 담당합니다.
또한 뷰와 모델의 중간에서 각각 할일을 넘기며 중재하는 역할을 합니다.
---------------------------------------------------------
23) 컨트롤러의 생성 규칙으로 모델과 뷰에 대한 정보를 가져야합니다.
 또한 모델 및 뷰의 변경에 대해 모니터링 즉 알고 처리해야합니다.
---------------------------------------------------------
24) 컨트롤러의 속성으로 모델과 뷰에대해 각각 호출과 업데이트를 통해 처리를 하며 아래의 listener는 요즘 배우고 있는 그 리스터와 같습니다.
어떠한 이벤트가 발생하기를 기다렸다가 발생하면 실행되는 컴포넌트로써 이벤트 핸들링이라고 합니다.
리스너를 이벤트 핸들러라고도 후며 추후에 다시 나올 것입니다.
---------------------------------------------------------
25) 정리를 하자면 뷰는 사용자가 입력할수 있게 유저 인터페이스를 제공하여 무엇인가 유저로부터 입력을 받으면 컨트롤러에 정보를 넘깁니다.
이때 마우스의 스크롤과같은 이벤트를 받는 다면 컨트롤러가 모델을 호출하는 것이아니라 뷰에 바로 화면을 내리라는 정보를 업데이트합니다.
컨트롤러에서 뷰로부터 입력받은 정보가 모델을 호출하여 조작을 해야하는 정보라면 모델의 정보를 수정하고 뷰에 업데이트하여 사용자에게 보여줍니다.

27) 앞에서MVC패턴이 적용안된 코드를 보았다면 이제는 MVC패턴이 적용된 코드를 볼 것입니다.
일반계산기와 공학용 계산기라는 결과물은 같지만 각각의 뷰는 공통의 컨트롤러와 모델을 사용할 수 있도록 구현했습니다.
아래의 간략한 흐름을 보겠습니다.
사용자가 숫자나 연산자를 누를 때 View JTextField 부분에 데이터가 입력되고  등호 버튼을 누를때 View JTextField의 데이터가 게터를 통해 컨트롤러에 가고 모델과 컴트롤러에서 연산을 한 후 다시 뷰로 전송하여 
유저에게 결과값을 알려주도록 되어있습니다. 시현해보겠습니다.
---------------------------------------------------------
자바 이클립스 켜서 시현한다.
---------------------------------------------------------
32) MVC패턴을 알아보았고 이를 통해 얻는 장단점을 알아보겠습니다.
개발을 혼자 하는 경우보다 여럿이서 할 때 한 애플리케이션에 대해 파트를 나누고 개발을 시작하기에 분업을 할 때 용이합니다.
또한 고객으로부터의 요청이나 버그등의 유지보수를 할 때 전체를 보는 것이아니라 각 파트로 나누었기에 유지보수에 용아합니다.
이를 애플리케이션이 유연하다고 표현합니다.또한 각 파트는 다른 곳에 응용할 수 있기에 확장성도 좋습니다.
---------------------------------------------------------
33) 단점으로는 뷰와모델의 완벽한 분리가 어려우며, 애플리케이션이 커질수록 컨트롤러의 코드량이 커져서 유지보수하기 어렵다는 점이 있습니다.
이것을 보완하려고 MVP(프리젠터)패턴이나 MVVM(모델 뷰 뷰모델)패턴 등도 있습니다.
---------------------------------------------------------
36) 사실 이론은 어려울 것이 없기 때문에 예시를 여러 개 보여주는 것이 더 좋겠다는 우리조의 공통된 의견으로 인해 온도계 애플리케이션을 소개하겠습니다.
온도를 표현하는 방식으로 화씨 와 섭씨 즉, 화레나이트와 셀시우스가 있는데 이를 서로 변환해주는 애플리케이션입니다.
여기서 중요한 것은 하나의 온도 데이터에 대해 섭씨, 화씨, 온도계, 슬라이더로 각각 출력해주는 애플리케이션입니다.
---------------------------------------------------------
37~45)보여주고 바로 실행하자. 슬라이드에 우리 조원분이 열심히 설명적어두었는데 시간상 생략하겠습니다.
---------------------------------------------------------
자바 이클립스 온도계 실행
--------------------------------------------------------- 
45) 이처럼 메인에서 같은 모델과 컨트롤러에 대해  뷰를 여러개 생성하는 MVC패턴의 예시에 대해 알아보았습니다.
스마트폰이나 노트북의 테마도 같은 원리가 아닐까 혼자 생각해보았습니다.
--------------------------------------------------------- 
47) 위에 코드에서 잠깐 보았는데 코드에 밑줄 즉deprecated가 되어있는것을 보았습니다.
즉 오래된 코드인 것들로 사라질 수 도있는데 그렇다고 MVC패턴이 의미가 없는 것이 아닙니다.
그전에 프레임워크에 대해 이때쯤이면 배웠을 줄 알았는데 아직안배웠기에 한줄로 요약하자면
소프트웨어 개발을 도와주는 하나의 뼈대 역할을 하는 도구입니다.
 MVC패턴을 활용한 대표적인 프레임 워크로 자바에서는 ~~~

~등이있으며, 각 프레임워크는 MVC패턴을 응용해서 적용하고 있습니다.
--------------------------------------------------------- 
48) 먼저 스프링 프레임워크 MVC입니다.
--------------------------------------------------------- 
50)사용자(브라우저)로부터 요청이 들어오면 DB로부터
필요한 데이터를 받은 Model 객체(Java Bean)를
JSP페이지(View)에 담아 응답으로 보내는 패턴
JSP가 View와 Controller역할을 모두 담당하는 단점이있기에
서블릿이 추가된 MVC2 패턴이 나오게 됐습니다.
--------------------------------------------------------- 
51)  MVC2 패턴의 서블릿은 요청에 대한 비즈니스 로직을 처리한 후,
이를 JSP에 반영하는 역할을 수행합니다.
--------------------------------------------------------- 
52) Spring Framework에서 MVC2모델을 좀 더 발전 시켜 Spring MVC가 나왔습니다.위 사잔의 구조와 역할을 간단히 살펴보면,
프론트 컨트롤러가 우선적으로 클라이언트로부터 모든 요청을 받게 되며, 실체 요청의 처리는 개별 컨트롤러 클래스로 위임합니다.
개별컨트롤러 클래스는 핸들러 라고도 합니다.(Mapping : 매핑 , 해당 값이 다른 값을 가리키도록 하는 것)
--------------------------------------------------------- 
53) 명칭은 약간 다르지만 대부분의 구조가 Spring Framework와 같습니다.
이처럼 개발하려는 애플리케이션에 맞게 MVC패턴을 활용할 수 있습니다. 
--------------------------------------------------------- 
54) 스프링 MVC의 각 역할은 다음과 같으며, DispatcherServlet이 프론트 컨트롤러로써 요청을 각각의 핸들러(컨트롤러)에게 위임합니다.
다른 것은 기존의 역할과 비슷합니다.
--------------------------------------------------------- 
55) 스프링 MVC의 동작 순서입니다.
사용자로부터 HTTP요청이 오면 디스패처 서블렛이 핸들러를 조회하고 어댑터 목록을 조회하여 맞는 핸들러를 호출하여
처리한 후에 뷰를 통해 HTML응답한 다는 것입니다.  
--------------------------------------------------------- 
56 ~ 60등록 폼) 자바 이클립스 실행
--------------------------------------------------------- 
61)장
다음은 파이썬의 대표적인 프레임 워크 장고 입니다.
장고에는 MVT라는 패턴이 있는데  순서상 모델 뷰 컨트롤러가  각각 모델 템플레이트 뷰 로써 MTV라고도 합니다.
각 MVT의 역할이나  동작순서는 시간관계상 생략하겠습니다.
--------------------------------------------------------- 
69) 결론으로 MVC패턴의 의의입니다. MVC패턴은 애플리케이션에서 역할 분리에 대한 가이드라인을 제시하여 프로그래밍을
보다 쉽게 하고 유지보수 측면에서 장점을 가지는 디자인 패턴의 한 종류입니다., MVC패턴을 기반으로한 디자인 패턴 프레임워크 등이
다방면에서 사용되고 있어 개발자로써 꼭 알고있어야할 개념입니다.
--------------------------------------------------------- 
71) 다음은 소감입니다.
(내꺼 소개하기)  마지막으로 우리 조 원분들 너무 고생많으셨습니다.
우리 조원의 소감을 한번씩 봐주시면 감사하겠습니다.
--------------------------------------------------------- 
74) 네 이것으로 3조의 발표 마치겠습니다. 감사합니다~~~~~~~~~
 